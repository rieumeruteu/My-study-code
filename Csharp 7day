
    //연산자 오버로드 
    //예시 1 연산자 오버로드를 사용하지 않았을 때

   public class kilogram
    {
        double mass;

        public kilogram(double mass)
        {
            this.mass = mass;
        }

        public kilogram Add(kilogram target)
        {
            return new kilogram(this.mass + target.mass);
        }

        public override string ToString()
        {
            return mass + "kg";
        }
    }

    class Program
    { 

        static void Main(string[] args)
        {
            kilogram kg1 = new kilogram(5);
            kilogram kg2 = new kilogram(10);

            kilogram kg3 = kg1.Add(kg2);
            
        }
    }

//연산자 오버로드 사용했을 때

   public class kilogram
    {
        double mass;

        public kilogram(double mass)
        {
            this.mass = mass;
        }

       public static kilogram operator +(kilogram op1, kilogram op2) //public static 타입 operator 연산자(매개변수들)
        {
            return new kilogram(op1.mass + op2.mass);
        }

        public override string ToString()
        {
            return mass + "kg";
        }
    }

    class Program
    { 

        static void Main(string[] args)
        {
            kilogram kg1 = new kilogram(5);
            kilogram kg2 = new kilogram(10);

            kilogram kg3 = kg1 + kg2;
            Console.WriteLine(kg3);
            
        }
    }

//클래스 간의 형변환
    public class Currency
    {
        decimal money;
        public decimal Money 
        {
            get
            {
                return money;
            }
        }

        public Currency(decimal money)
        {
            this.money = money;
        }

    }

    public class Won: Currency
    {
        public Won(decimal money) : base(money) { }//base: Currency의 메서드들을 가져온다

        public override string ToString()
        {
            return Money + "Won";
        }

    }

    public class Dollar: Currency
    {
        public Dollar(decimal money) : base(money) { }

        public override string ToString()
        {
            return Money + "Dollar";
        }
    }



    class Program
    { 

        static void Main(string[] args)//won 과 dollar의 형이 완전히 다르게 된다.
        {
            Won won = new Won(1000);//won과 dollar를 섞어쓰는 위험성을 줄여준다.
            Dollar dollar = new Dollar(1);
            
        }
    }


//implicit 메서드
 public class Currency
    {
        decimal money;
        public decimal Money 
        {
            get
            {
                return money;
            }
        }

        public Currency(decimal money)
        {
            this.money = money;
        }

    }

    public class Won: Currency
    {
        public Won(decimal money) : base(money) { }

        public override string ToString()
        {
            return Money + "Won";
        }

    }

    public class Dollar: Currency
    {
        public Dollar(decimal money) : base(money) { }

        public override string ToString()
        {
            return Money + "Dollar";
        }

        static public implicit operator Won(Dollar dollar)// implicit 메서드로 dollar에서 won으로 대입할 수 있다.
        {
            return new Won(dollar.Money * 1000m);
        }
    }



    class Program
    { 

        static void Main(string[] args)
        {
            Dollar dollar = new Dollar(1000);
            Won won1 = dollar;// 암시적(implicit) 형변환 가능
            Won won2 = (Won)dollar;//명시적(explicit)형변환 가능

            Console.WriteLine(won1);
        }
    }


//explicit 메서드 
      public class Currency
    {
        decimal money;
        public decimal Money 
        {
            get
            {
                return money;
            }
        }

        public Currency(decimal money)
        {
            this.money = money;
        }

    }

    public class Won: Currency
    {
        public Won(decimal money) : base(money) { }

        public override string ToString()
        {
            return Money + "Won";
        }

    }

    public class Dollar: Currency
    {
        public Dollar(decimal money) : base(money) { }

        public override string ToString()
        {
            return Money + "Dollar";
        }

        static public explicit operator Won(Dollar dollar)// implicit 메서드로 dollar에서 won으로 대입할 수 있다.
        {
            return new Won(dollar.Money * 1000m);
        }
    }



    class Program
    { 

        static void Main(string[] args)
        {
            Dollar dollar = new Dollar(1000);
            Won won2 = (Won)dollar;//명시적(explicit)형변환만 가능

            Console.WriteLine(won2);
        }
    }




//UNITY//
//객체
    
    class Knight
    {
        public int hp;
        public int attack;

        public Knight()//생성자: 클래스 생성하자마자 작동되는 존재
        {
            hp = 100;
            attack = 10;
            Console.WriteLine("생성자 호출");
        }

        public Knight Clone()
        {
            Knight knight = new Knight();
            knight.hp = hp;
            knight.attack = attack;
            return knight;

        }

        public Knight(int hp,int attack)
        {
            this.attack = attack;
            this.hp = hp; //원래 hp를 구분하기 위한 명시적 정의
            Console.WriteLine("생성자(1)(1) 호출");
        }

        public Knight(int hp)
        {
            this.hp = hp; //원래 hp를 구분하기 위한 명시적 정의
            Console.WriteLine("생성자(1) 호출");
        }

        public void Move()
        {
            Console.WriteLine("kngiht Move");
        }

        public void Attack()
        {
            Console.WriteLine("Knight Attack");
        }
    }

    
    struct Mage
    {
        public int hp;
        public int attack;
    }

    class Program
    {

        static void killMage(Mage mage)
        {
            mage.hp = 0;
        }

        static void killKnight(Knight knight)
        {
            knight.hp = 0;
        }

      


        static void Main(string[] args)
        {
            //struct
            Mage mage;
            mage.hp = 100;
            mage.attack = 50;
            killMage(mage);

            Mage mage2 = mage;
            mage2.hp = 0;

            //class
            Knight knight = new Knight(50);// new로 생성된 class들에게 생성자가 생긴다.
            knight.Move();
            knight.Attack();
            killKnight(knight);

            Knight kngiht2 = knight;
            kngiht2.hp = 0;

            Knight n = new Knight();
            n.attack = 100;

            Knight n2 = knight.Clone();//복사본도 생기더라
            n2.hp = 100;
            n2.attack = 20;


        }
    }



     //정적
    
    class Knight
    {
        //필드
        public int hp;
        public int attack;
        public int id;
        static public int count=1;//클래스에 종속됨(여러개의 Knight를 생성해도 이 값은 항상 공유가 된다)



        public Knight()//기존의 pulic+매서드는 크래스에 종속이 아닌 호출된 매서드에 종속이된다.
        {
            id = count++;//Kngiht가 생성될 때마다 id 카운터가 올라간다.
            hp = 100;
            attack = 10;
            Console.WriteLine("생성자 호출");
        }

        static public void Test()
        {//static 변수는 static 변수로 정의된 인스턴스들만 넣을 수 있다. this로 pulic을 호출할 수 없다.

            count++;
        }
        
        static public Knight CreatKnight()
        {
            Knight knight = new Knight();//hp,attck을 사용하고 싶으면 새로운 Knight인스턴스를 생성해야 한다 
            knight.hp = 100;
            knight.attack = 20;
            return knight;
        }

        public Knight Clone()
        {
            Knight knight = new Knight();
            knight.hp = hp;
            knight.attack = attack;
            return knight;

        }

        public Knight(int hp,int attack)
        {
            this.attack = attack;
            this.hp = hp; //원래 hp를 구분하기 위한 명시적 정의
            Console.WriteLine("생성자(1)(1) 호출");
        }

        public Knight(int hp)
        {
            this.hp = hp; //원래 hp를 구분하기 위한 명시적 정의
            Console.WriteLine("생성자(1) 호출");
        }

        public void Move()
        {
            Console.WriteLine("kngiht Move");
        }

        public void Attack()
        {
            Console.WriteLine("Knight Attack");
        }
    }

    
    struct Mage
    {
        public int hp;
        public int attack;
    }

    class Program
    {

        static void killMage(Mage mage)
        {
            mage.hp = 0;
        }

        static void killKnight(Knight knight)
        {
            knight.hp = 0;
        }

      


        static void Main(string[] args)
        {
            Knight knight = Knight.CreatKnight();//static 매서드 호출 (샘플명이 필요없는 것들이 static)
            knight.Move();//샘플명으로 호출해야된는 것들이 일반

            Console.WriteLine();//static

            Random rand = new Random();
            rand.Next();//샘플로 호출 했다.(static이 아님)
        }
    }