//다익스트라 최단거리 알고리즘

class Graph
        {
           
            int[,] arr = new int[6,6]
             {
                    {-1,15,-1,35,-1,-1 },//0
                    {15,-1,05,10,-1,-1 },//1
                    {-1,05,-1,-1,-1,-1 },//2
                    {35,10,-1,-1,05,-1 },//3
                    {-1,-1,-1,05,-1,05 },//4
                    {-1,-1,-1,-1,05,-1 },//5
             };
            public void Dijikstra(int start)
            {
                bool[] visited = new bool[6];//점령 여부
                int[] distance = new int[6];//장소간에 거리
                int[] parent = new int[6];//이전 장소 기록
                Array.Fill(distance, Int32.MaxValue); // 배열 내용들을 전부 최댓값으로 채운다.(0이면 해당 지역에 방문했는지 안했는지 헷갈릴수 있기 때문)
                distance[start] = 0;
                parent[start] = start;

                //가장 가까이 있는 지역을 찾는다
                while(true)
                {

                    //가장 가까운 목적지의 거리와 목적지의 번호를 저장한다.
                    int closest = Int32.MaxValue;// 우선 거리의 초기값을 최대로 
                    int now = -1;


                    //장소 
                    for(int i=0; i<6; i++)
                    {
                        //이미 방문한 장소면 무시
                        if (visited[i])
                            continue;
                        //발견된적(예약)이 없거나, 기존 장소보다 멀리 있으면 무시
                        if (distance[i] == Int32.MaxValue || distance[i] >= closest)// ex)distance[3]은 35이고 closest는 15니깐 가까운 closest=distance[1]을 먼저 방문
                            continue;

                        // 조건에 맞는 장소는 가장 유력한 장소의 내용을 갱신
                        closest = distance[i];
                        now = i;
                        
                    }

                    //다음 이동할 장소가 없다-> 종료
                    if (now == -1)
                        break;

                    // 장소를 발견했으니깐 찾아간다.
                    visited[now] = true;



                    //찾아간 장소와 인접한 다른 장소들을 조사해서, 최단거리를 갱신한다.
                    for(int next=0; next<6; next++)
                    {
                        //연결되지 않은 장소면 무시
                        if (arr[now, next] == -1)
                            continue;
                        //이미 방문한 곳이면 가지 않는다.
                        if (visited[next] == true)
                            continue;

                        //새로 조사된 장소의 최단거리를 계산한다.
                        int nextDist = distance[now] + arr[now, next];
                        parent[next] = now;

                        //기존에 발견한 최단거리가 새로 조사된 최단거리보다 크면, 정보를 갱신
                        if(nextDist<distance[next])
                        {

                            distance[next] = nextDist;
                        }
                    }
                }
            }

        }

        static void Main(string[] args)
        {
            Graph graph = new Graph();
            graph.Dijikstra(0);

           

        }
    }