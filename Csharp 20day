//BFS: 너비 우선 탐색: 시작해서 최단 거리에 있는 값들을 먼저 점령(확인)을 하고 이동하는 방식이다.

class Program
{
    class Graph
    {
        int[,] arr=new int[6][6]
        {
            {0,1,0,1,0,0 },
            {1,0,1,1,0,0 },
            {0,1,0,0,0,0 },
            {1,1,0,0,1,0 },
            {0,0,0,1,0,1 },
            {0,0,0,0,1,0 },
        };

        public void BFS(int start)
        {
            bool[] found=new bool[6];//점령 여부 확인
            Queue<int> storage=new Queue<int>();//이전 값을 가져오기 위해서 큐를 사용한다(선입선출)

            //추가정보를 얻고 싶으면 값을 추가하면 된다
            int[]distance=new int[6]; //거리값
            int[]lastPoint=new int[6]; //이전값


        
         found[start]=true;
         storage.Enqueue=start;
         while(storage.count>0)
            {
             int now=storage.Dequeue;
              Console.WriteLine(now);
              for(int i=0; i<6;i++)
              {
                  if(found[now]) //이미 점령했던 곳이면(참이면) 무시한다
                  continue;
                 if(arr[now,i]==0)//연결되어있지 않으면 무시한다
                 continue;
                 found[i]=true;
                 Storage.Enqueue=i;// 큐 저장소에 해당 배열에 있는 1 값들을 쌓아놓는다.
                 
                 //추가정보
                 distance[i]=distance[now]+1;//거리 증가
                 lastPoint[i]=now;// i의 전위치가 now이니깐 now를 넣어 준다.
              }

            }
        }


    }

}



