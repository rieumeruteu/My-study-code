  //트리 이론 구현 연습 :가족 족보처럼 뿌리가 퍼진 모습이다(재귀함수)
    class Program
    {
       class TreeNode<T>
        {
            public T Data { get; set; }
            public List<TreeNode<T>> children { get; set; } = new List<TreeNode<T>>();
        }

        static TreeNode<string>TreeTeam()
        {
            TreeNode<string> root = new TreeNode<string>() { Data = "R1 개발실" };
            {
                #region 디자인팀 
                {
                    TreeNode<string> node = new TreeNode<string>() { Data = "디자인 팀" };
                    node.children.Add(new TreeNode<string>() { Data = "캐릭터" });
                    node.children.Add(new TreeNode<string>() { Data = "아이템" });
                    node.children.Add(new TreeNode<string>() { Data = "스킬" });
                    root.children.Add(node);
                }
                #endregion

                #region 개발팀 
                {
                    TreeNode<string> node = new TreeNode<string>() { Data = "개발팀" };
                    node.children.Add(new TreeNode<string>() { Data = "서버" });
                    node.children.Add(new TreeNode<string>() { Data = "클라이언트" });
                    node.children.Add(new TreeNode<string>() { Data = "엔진" });
                    root.children.Add(node);
                }
                #endregion

                #region 아티스트팀 
                {
                    TreeNode<string> node = new TreeNode<string>() { Data = "아티스트팀" };
                    node.children.Add(new TreeNode<string>() { Data = "배경" });
                    node.children.Add(new TreeNode<string>() { Data = "일러스트" });

                    root.children.Add(node);
                }
                #endregion

                return root;

            }
        }

        static int GetHight(TreeNode<string>Count) //트리 높이
        {
            int Height = 0;

            foreach(TreeNode<string> node in Count.children)
            {
                int newHeight = GetHight(node) + 1;
                Height = Math.Max(Height, newHeight);
            }
            

            return Height;
        }

        static void printTree(TreeNode<string> test)//트리 내용 출력
        {
            Console.WriteLine(test.Data);
            foreach (TreeNode<string> printNode in test.children)
                printTree(printNode);
           
        }

        static void Main(string[] args)
        {
            TreeNode<string> root = TreeTeam();
            printTree(root);
            Console.WriteLine(GetHight(root)); 


        }
    }



    //힙 트리: 2진트리 중 하나, 조건:
    // 부모노드가 자식노드보다 커야한다.
    // 마지막 레벨을 제외한 모든 레벨에 노드가 꽉 차 있어야 한다
    // 마지막 레벨에 노드가 있을 때 항상 왼쪽부터 순서대로 채워야 한다.
    // 노드의 개수를 알면 트리 구존는 무조건 확정지을 수 있다.

    //n번 노드의 왼쪽방향 노드: 2*n+2 
    //n번 노드의 오른쪽방향 노드: 2*n+1
    //n번 노드의 부모 노드: (i-1)/2


    class Program
    {
       class TreeNode<T>
        {
            public T Data { get; set; }
            public List<TreeNode<T>> children { get; set; } = new List<TreeNode<T>>();
        }

        static TreeNode<string>TreeTeam()
        {
            TreeNode<string> root = new TreeNode<string>() { Data = "R1 개발실" };
            {
                #region 디자인팀 
                {
                    TreeNode<string> node = new TreeNode<string>() { Data = "디자인 팀" };
                    node.children.Add(new TreeNode<string>() { Data = "캐릭터" });
                    node.children.Add(new TreeNode<string>() { Data = "아이템" });
                    node.children.Add(new TreeNode<string>() { Data = "스킬" });
                    root.children.Add(node);
                }
                #endregion

                #region 개발팀 
                {
                    TreeNode<string> node = new TreeNode<string>() { Data = "개발팀" };
                    node.children.Add(new TreeNode<string>() { Data = "서버" });
                    node.children.Add(new TreeNode<string>() { Data = "클라이언트" });
                    node.children.Add(new TreeNode<string>() { Data = "엔진" });
                    root.children.Add(node);
                }
                #endregion

                #region 아티스트팀 
                {
                    TreeNode<string> node = new TreeNode<string>() { Data = "아티스트팀" };
                    node.children.Add(new TreeNode<string>() { Data = "배경" });
                    node.children.Add(new TreeNode<string>() { Data = "일러스트" });

                    root.children.Add(node);
                }
                #endregion

                return root;

            }
        }

        static int GetHight(TreeNode<string>Count)
        {
            int Height = 0;

            foreach(TreeNode<string> node in Count.children)
            {
                int newHeight = GetHight(node) + 1;
                Height = Math.Max(Height, newHeight);
            }
            

            return Height;
        }

        static void printTree(TreeNode<string> test)
        {
            Console.WriteLine(test.Data);
            foreach (TreeNode<string> printNode in test.children)
                printTree(printNode);
           
        }

        static void Main(string[] args)
        {
            TreeNode<string> root = TreeTeam();
            printTree(root);
            Console.WriteLine(GetHight(root)); 


        }
    }



//우선순위 큐
    //값들을 무작위로 채우고 값들끼리 서열정리를 해서 가장 큰값부터 출력되도록 만든다.
    //만약 반대로 가장 작은 값을 출력시키고 싶으면 push에 마이너스 값을 넣어서 출력(Pop)에 마이너스를 넣어주면 플러스 가장 작은 값이 출력된다. 

    class Program
    {
        class PriorityQueue
        {
            List<int> _heap = new List<int>();

            public void Push(int data)
            {
                //힙의 맨 끝에 새로운 데이터를 삽입한다.
                _heap.Add(data);

                int now = _heap.Count - 1;
                //서열정리
                while (now>0)
                {
                    int top = (now - 1) / 2; //부모 인덱스 
                    if (_heap[now] < _heap[top])//부모보다 작으면 서열정리 실패
                        break;

                    //서열정리 성공(두값의 위치 교체)
                    int storage = _heap[top];
                    _heap[top] = _heap[now];
                    _heap[now] = storage;

                    now = top;
                }

            }

            public int Pop()
            {
                //반환할 데이터 따로 저장
                int ret = _heap[0];

                //마지막 데이터를 루트로 이동
                int lastIndex = _heap.Count - 1;
                _heap[0] = _heap[lastIndex];
                _heap.RemoveAt(lastIndex);
                lastIndex--;

                //맨 마지막(작은) 값을 위로 올렸으니 서열정리 당하기

                int now = 0;
                while (true)
                {
                    int left = 2 * now + 1;
                    int right = 2 * now + 2;
                    int top = now;//최상위 자리


                    //왼쪽이 현재값(부모값)보다 크면 왼쪽으로 이동
                    if (left <= lastIndex && _heap[top] < _heap[left])
                        top = left;//왼쪽이 최상위 자리 쟁탈


                    //오른쪽이 현재값(왼쪽 이동 포함)보다 크면 오른쪽으로 이동
                    if (right <= lastIndex && _heap[top] < _heap[right])
                        top = right;//오른쪽이 최상위 자리 쟁탈

                    //외쪽 오른쪽 둘다 부모값(마지막 값)보다 작으면 서열정리 안 당함
                    if (top == now)
                        break;

                    //서열 정리 끝났으면 자리를 바꾼다
                    int storage = _heap[top];
                    _heap[top] = _heap[now];
                    _heap[now] = storage;

                    //검사위치 이동
                    now = top;

                }    

                
                return ret;
            }
            public int Count()
            {
                return _heap.Count;
            }

        }

        static void Main(string[] args)
        {
            PriorityQueue q = new PriorityQueue();
            q.Push(10);
            q.Push(50);
            q.Push(70);
            q.Push(20);
            q.Push(60);

            while(q.Count()>0)
            {
                Console.WriteLine(q.Pop()) ;
            }

        }
    }


    class Program
    {

        //제너릭 형식으로 문법 추가해보기
        class PriorityQueue<T> where T: IComparable<T>
        {
            List<T> _heap = new List<T>();

            public void Push(T data)
            {

                _heap.Add(data);

                int now = _heap.Count - 1;
                while (now > 0)
                {
                    int top = (now - 1) / 2;
                    if (_heap[now].CompareTo(_heap[top]) < 0)
                        break;

                    T storage = _heap[top];
                    _heap[top] = _heap[now];
                    _heap[now] = storage;

                    now = top;
                }

            }

            public T Pop()
            {
                T ret = _heap[0];

                int lastIndex = _heap.Count - 1;
                _heap[0] = _heap[lastIndex];
                _heap.RemoveAt(lastIndex);
                lastIndex--;


                int now = 0;
                while (true)
                {
                    int left = 2 * now + 1;
                    int right = 2 * now + 2;
                    int top = now;

                    if (left <= lastIndex && _heap[top].CompareTo(_heap[left])<0)
                        top = left;

                    if (right <= lastIndex && _heap[top].CompareTo( _heap[right])<0)
                        top = right;
                    if (top == now)
                        break;

                    T storage = _heap[top];
                    _heap[top] = _heap[now];
                    _heap[now] = storage;

                    now = top;

                }


                return ret;
            }
            public int Count()
            {
                return _heap.Count;
            }

        }

        class Knight: IComparable<Knight>
        {
            public int ID { get; set; }

            public int CompareTo(Knight other)
            {
                if (ID == other.ID)
                    return 0;
                return ID > other.ID ? 1 : -1;
            }
        }
       


        static void Main(string[] args)
        {
            PriorityQueue<Knight> q = new PriorityQueue<Knight>();
            q.Push(new Knight() { ID=10 });
            q.Push(new Knight() { ID = 20 });
            q.Push(new Knight() { ID = 30 });
            q.Push(new Knight() { ID = 40 });
            q.Push(new Knight() { ID = 50 });

            while (q.Count() > 0)
            {
                Console.WriteLine(q.Pop());
            }

        }
    }