//예외처리: 예외상황이 일어났을 때 임시방편으로 막는 코드이다.(게임 제작할떈 쓸데가 없다..)


class Program
    {
        //예외처리
        /*
         사용 경우
        1. 0으로 나누었을 떄
        2. 잘못된 메모리 참조 (null)
        3. 오버플로우
         */

        static void Main(string[] args)
        {
            try
            {
                int a = 10;
                int b = 0;
                int result = a/ b;// 0으로 나누었기 때문에 프로그램이 뻗는다
                int c = 0;// 위에 예외상황이 생겼기 때문에 예외상황 아래는 실행이 안된다.
            }
            catch (Exception e)//exception으로 예외상황으로 넣어서 프로그램이 뻗는 것을 막아준다.
            {

            }
            finally//예외상황이 생겨도 꼭 실행 시켜야 하는 애들은 여기에 넣는다.
            {

            }
        }



` //Nullable: 널값을 이용하는 방법
    class Program
    {
        
        static void Main(string[] args)
        {
            
            int? number=null; //Nullable 최초 정의 

            if(number != null)// null로 출력하면 프로그램이 뻗기 때문에 null인지 확인해야 한다
            {
                int a = number.Value;// int a=number; 라고 입력하면 오류가 나온다.
                Console.WriteLine(a);
            }
            if(number.HasValue)//HasValue는 bool값으로 null인지 아닌지 확인하는 방법이다 (위랑 비슷하다)
            {
                int a = number.Value;
                Console.WriteLine(a);
            }

        }
         
         
    // 코드 간략화
    
     class Program
    {
        
        static void Main(string[] args)
        {
            
            int? number=null;

            int b = number ?? 0; //만약 number가 null이 아니면 number값을 그대로 가져오고 그렇지 않으면 0을 갖는다.        
            Console.WriteLine(b);

        }
    }



    // 코드 간략화

     class Monster
        {
            public int id { get; set; }
        }

        static void Main(string[] args)
        {
            Monster monster = null;

            if(monster!=null)
            {
                int monsterId = monster.id;
            }

            //만약 monster가 null이면 id에 null을 넣고 null이 아니면 .id값을 id에 넣는다.(위 코드랑 똑같다)  
            int? id = monster?.id;
        }